import sys
from cs1graphics import *
from time import sleep
import os
c = Canvas(w=1360, h=820,bgColor="lightblue", title="Practice")
h= c.getHeight()
w = c.getWidth()
#intro
desktop = Polygon(Point(0,0),Point(0,h),Point(w,h),Point(w,0))
desktop.setFillColor((5, 29, 137))
desktop.setDepth(100)
windows_logo1 = Polygon(Point(0,0),Point(0,50),Point(50,50),Point(50,-10))
windows_logo1.setFillColor((21, 131, 244))
windows_logo1.setBorderColor((21, 131, 244))
windows_logo2 = windows_logo1.clone()
windows_logo2.adjustReference(0,50)
windows_logo2.scale(1.23)
windows_logo2.move(55,0)
windows_logo4 = Layer()
windows_logo4.add(windows_logo1)
windows_logo4.add(windows_logo2)
windows_logo3 = windows_logo4.clone()
windows_logo3.adjustReference(52.5,52.5)
windows_logo3.flip(90)
windows_logo = Layer()
windows_logo.add(windows_logo3)
windows_logo.add(windows_logo4)
windows_logo.move(w-w/4,h/2)
windows_logo.adjustReference(52.5,52.5)
windows_logo.scale(1.5)
icon1 = ClosedSpline(Point(0,10),Point(0,0),Point(10,0),Point(40,0),Point(50,0),Point(50,10),Point(50,40),Point(50,50),Point(40,50),Point(10,50),Point(0,50),Point(0,40))
icon1.setFillColor((255, 249, 232))
icon1.move(50,50)
icon2 = icon1.clone()
icon2.move(0,75)
icon3 = icon2.clone()
icon3.move(0,75)
icon4 = icon3.clone()
icon4.adjustReference(25,15)
icon4.scale(1.4)
icon4.setDepth(60)
icon4.setFillColor((13, 77, 255))
cursor = Polygon(Point(0,10),Point(5,-5),Point(10,10),Point(6,10),Point(6,17),Point(4,17),Point(4,10))
cursor.setFillColor("white")
cursor.move(120,50)
cursor.rotate(-30)
cursor.scale(1.25)
cursor.setBorderColor("blue")
cursor.setBorderWidth(0.2)
cursor.setDepth(0)
loading_cursor = Circle(8)
loading_cursor.setFillColor("white")
loading_cursor.setBorderDash(0.8)
loading_cursor.setBorderWidth(3)
loading_cursor.setBorderColor((21, 131, 244))
c.add(desktop)
c.add(windows_logo)
c.add(icon1)
c.add(icon2)
c.add(icon3)
c.add(cursor)
cursor.moveTo(w-20,h-50)
for i in range(400):
    cursor.move(-3.1,-1.3)
    sleep(0.001)
c.add(icon4)
dropbox = ClosedSpline(Point(0,15),Point(0,0),Point(15,0),Point(15,0),Point(30,0),Point(30,15),Point(30,15),Point(30,30),Point(15,30),Point(15,30),Point(0,30),Point(0,15))
dropbox.setFillColor((255, 249, 232))
dropbox.setBorderColor("grey")
dropbox.setDepth(60)
dropbox.move(110,250)
c.add(dropbox)
for i in range(80):
    dropbox.setPoint(dropbox.getPoint(3)+Point(2,0),3)
    dropbox.setPoint(dropbox.getPoint(4)+Point(2,0),4)
    dropbox.setPoint(dropbox.getPoint(5)+Point(2,0),5)
    dropbox.setPoint(dropbox.getPoint(6)+Point(2,1.8),6)
    dropbox.setPoint(dropbox.getPoint(7)+Point(2,1.8),7)
    dropbox.setPoint(dropbox.getPoint(8)+Point(2,1.8),8)
    dropbox.setPoint(dropbox.getPoint(9)+Point(0,1.8),9)
    dropbox.setPoint(dropbox.getPoint(10)+Point(0,1.8),10)
    dropbox.setPoint(dropbox.getPoint(11)+Point(0,1.8),11)
open = Text("Open",12)
open.setJustification('left')
open.move(150,280)
open_polygon = ClosedSpline(dropbox.getPoint(0),dropbox.getPoint(1),dropbox.getPoint(2),dropbox.getPoint(3),dropbox.getPoint(4),dropbox.getPoint(5),dropbox.getPoint(5)+Point(0,30),dropbox.getPoint(5)+Point(0,30),Point(80,45),dropbox.getPoint(0)+Point(0,30),dropbox.getPoint(0)+Point(0,30))
open_polygon.setFillColor((13, 77, 255))
open_polygon.setDepth(55)
open_polygon.move(110,250)
divider1 = Path(Point(0,0),Point(190,0))
divider1.move(110,295)
divider2 = divider1.clone()
divider2.move(0,30)
divider3 = divider2.clone()
divider3.move(0,30)
divider4 = divider3.clone()
divider4.move(0,30)
c.add(divider1)
c.add(divider2)
c.add(divider3)
c.add(divider4)
run_as = open.clone()
run_as.setMessage("Run as Administrator")
run_as.move(55,30)
share = open.clone()
share.setMessage("Share")
share.move(3,60)
file_location = run_as.clone()
file_location.move(-9,60)
file_location.setMessage("Open Filelocation")
properties = share.clone()
properties.move(18,60)
properties.setMessage("Properties")
c.add(open)
c.add(run_as)
c.add(share)
c.add(file_location)
c.add(properties)
for i in range(40):
    cursor.move(1,1)
    sleep(0.001)
sleep(0.1)
loading_cursor.moveTo(140,290)
c.remove(cursor)
c.add(open_polygon)
c.add(loading_cursor)
for i in range(100):
    loading_cursor.rotate(2)
    sleep(0.01)
desktop.setFillColor("black")
c.remove(windows_logo)
c.remove(icon1)
c.remove(icon2)
c.remove(icon3)
c.remove(icon4)
c.remove(dropbox)
c.remove(divider1)
c.remove(divider2)
c.remove(divider3)
c.remove(divider4)
c.remove(open)
c.remove(run_as)
c.remove(share)
c.remove(file_location)
c.remove(properties)
c.remove(open_polygon)
c.remove(loading_cursor)
box1 = ClosedSpline(dropbox.getPoint(0),dropbox.getPoint(1),dropbox.getPoint(1),dropbox.getPoint(3)-Point(15,0),dropbox.getPoint(3)+Point(15,0),dropbox.getPoint(4)+Point(0,30),
dropbox.getPoint(5),dropbox.getPoint(5)+Point(0,10),dropbox.getPoint(5)+Point(0,10),dropbox.getPoint(0)+Point(30,10),dropbox.getPoint(0)+Point(0,10),dropbox.getPoint(0)+Point(0,-15))
box1.setFillColor("white")
box1.setDepth(55)
box1.move(400,250)
new_game = Text("New Game",26)
new_game.setJustification('left')
new_game.setFontColor("white")
new_game.move(w/2,h/2-125)
continue_game = new_game.clone()
continue_game.setMessage("Continue Game")
continue_game.setFontColor("grey")
continue_game.move(0,50)
mission = continue_game.clone()
mission.setMessage("Select Mission")
mission.setFontColor("white")
mission.move(0,50)
settings = mission.clone()
settings.setMessage("Settings")
settings.move(0,50)
exit = settings.clone()
exit.setMessage("Exit")
exit.move(0,50)
c.add(new_game)
c.add(continue_game)
c.add(mission)
c.add(settings)
c.add(exit)
cursor.setFillColor("black")
cursor.setBorderColor("white")
c.add(cursor)
for i in range(115):
    cursor.move(4,0)
    sleep(0.006)
new_game.setFontColor("green")
for i in range(50):
    cursor.move(2,0)
    sleep(0.006)
sleep(1)
new_game.setFontColor("darkgreen")
c.remove(new_game)
c.remove(continue_game)
c.remove(mission)
c.remove(settings)
c.remove(exit)
c.remove(desktop)
c.remove(cursor) 

#bushes
bush = Layer()
bush1 = ClosedSpline(Point(0,0),Point(0,20),Point(20,20),
Point(20,20),Point(20,50),Point(50,50),
Point(50,50),Point(50,68.25),Point(75,75),
Point(75,75),Point(100.75,68.25),Point(100,50),
Point(100,50),Point(120,50),Point(120,30),
Point(120,30),Point(140,30),Point(140,10),
Point(140,10),Point(150,10),Point(150,0),
Point(150,0),Point(0,0),Point(0,0))
bush1.setFillColor((43, 174, 42))
bush1.setBorderWidth(0)
bush1.flip(90)
bush1.move(50,150)
bush2 = bush1.clone()
bush2.move(-15,0)
bush2.scale(1.5)
bush2.setFillColor((8, 144, 8))
bush2.setDepth(60)
bush.add(bush1)
bush.add(bush2)
bush.move(0,h-150)
bush.setDepth(80)
bush.adjustReference(w/2,-h/2+150)
tree = Layer()
leaf1 = Circle(10)
leaf1.setFillColor((140, 179, 72))
leaf1.setBorderColor((140, 179, 72))
leaf2 = leaf1.clone()
leaf2.move(-8,0)
leaf3 = leaf2.clone()
leaf3.move(-8,0)
leaf3.scale(1.2)
leaf4  = leaf2.clone()
leaf4.move(-5,-10)
leaf5 = leaf3.clone()
leaf5.move(10,-20)
leaf6 = leaf1.clone()
leaf6.move(-2,-10)
truck = Polygon(Point(-5,30),Point(-3,18),Point(-5,10),Point(-2,12),Point(0,0),Point(3,18),Point(5,16),Point(4,24),Point(5,30))
truck.setFillColor((97, 62, 42))
truck.setBorderColor((97, 62, 42))
truck.move(-7,0)
tree.add(leaf1)
tree.add(leaf2)
tree.add(leaf3)
tree.add(leaf4)
tree.add(leaf5)
tree.add(leaf6)
tree.add(truck)
tree.move(700,h)
tree.scale(7)
tree.setDepth(80)
tree.adjustReference(-20,-h/2)

no_bullets=12
center_width, center_height = c.getWidth()/2,c.getHeight()/2
gun = Layer()
gunhandletop= Polygon(Point(50,-20),Point(20,-10),Point(120,90),Point(120,110),Point(150,100),Point(150,80))
gunhandletop.setFillColor("black")
gunhandletop.setBorderColor("grey")
gunhandletop.setBorderWidth(1)
gunhandleback = Polygon(Point(150,80),Point(120,90),Point(120,120),Point(120,190),Point(150,180),Point(150,110))
gunhandleback.setFillColor("black")
gunhandleback.setBorderColor("grey")
gunhandleback.setBorderWidth(1)
gunhandlebottom= Polygon(Point(120,190),Point(90,160),Point(90,90),Point(120,120))
gunhandlebottom.setFillColor("black")
gunhandlebottom.setBorderColor("grey")
gunhandlebottom.setBorderWidth(1)
gunhandleright = Polygon(Point(50,-20),Point(50,10),Point(150,110),Point(150,80))
gunhandleright.setFillColor("black")
gunhandleright.setBorderColor("grey")
gunhandleright.setBorderWidth(1)
gunhandleright.setDepth(60)
gunhandlebtm = Polygon(Point(20,20),Point(50,10),Point(150,110),Point(120,120))
gunhandlebtm.setFillColor("black")
gunhandlebtm.setBorderColor("grey")
gunhandlebtm.setBorderWidth(1)
gunhandlebtm.setDepth(60)
gunhandlefront = Polygon(Point(20,20),Point(50,10),Point(50,-20),Point(20,-10))
gunhandlefront.setFillColor("black")
gunhandlefront.setBorderColor("grey")
gunhandlefront.setBorderWidth(1)
gunhandlefront.setDepth(60)
gunfingerpull = Spline(Point(60,90),Point(75,110),Point(81,80))
gunfingerpull.setBorderWidth(5)
gunfingerpull.setBorderColor("black")
gunfingerpull.setDepth(65)
gunfinger = Polygon(Point(90,120),Point(60,90),Point(60,60),Point(60,90))
gunfinger.setBorderWidth(10)
gunfinger.setBorderColor("black")
gunfinger.setDepth(35)
gunaim = Polygon(Point(126,88),Point(126,74),Point(129,75),Point(129,82),Point(141,80),Point(141,71),Point(144,72),Point(144,83))
gunaim.setFillColor("black")
gunaim.setBorderColor("grey")
gunaim.setDepth(10)
gunaim.setBorderWidth(1)
gunbarrel = Polygon(Point(115,51.666),Point(125,61.666),Point(105,68.334),Point(95,58.334))
gunbarrel.setFillColor("grey")
gunbarrel.setBorderWidth(0)
gunbarrel.setDepth(0)
gun.add(gunaim)
gun.add(gunbarrel)
gunhandleleft= Polygon(Point(20,-10),Point(20,20),Point(120,120),Point(120,90))
gunhandleleft.setFillColor("black")
gunhandleleft.setBorderColor("grey")
gunhandleleft.setBorderWidth(1)
mag = Layer()
mag1 = Polygon(Point(120,80),Point(90,90),Point(90,160),Point(120,190),Point(150,180),Point(150,110))
mag1.setBorderColor("white")
mag1.setFillColor("black")
mag2 = Path(Point(150,110),Point(120,120),Point(120,190),Point(120,120),Point(90,90))
mag2.setBorderColor("white")
mag2.setBorderWidth(1)
mag.add(mag1)
mag.add(mag2)
bullet = Polygon(Point(120,130),Point(135,135),Point(140,125),Point(100,115),Point(105,120))
bullet = bullettry= Polygon(Point(120,130),Point(120,150),Point(132,150),Point(132,130),Point(126,115))
bullet.scale(0.75)
bullet.rotate(-45)
bullet.setBorderColor("yellow")
bullet.setFillColor("orange")
bullet.move(5,-30)
bullet2=bullet.clone()
bullet2.move(-15,5)
flyingbullet = bullet.clone()
flyingbullet.scale(1)
flyingbullet.deletePoint(-1)
flyingbullet.move(-10,-30)
flyingbullet.setDepth(60)
trigger = Layer()
triggerfinger = Polygon(Point(69,84),Point(60,100),Point(69,106),Point(77,91.7),Point(85,100),Point(85,105))
triggerfinger.setFillColor((249/1.2, 184/1.2, 149/1.2))
triggerfinger.setDepth(20)
triggerfinger.setBorderWidth(0)
triggerfinger.move(5,-10)
triggertip = Circle(4.9244289,centerPt=Point(64.5,103))
triggertip.setFillColor((249/1.2, 184/1.2, 149/1.2))
triggertip.setDepth(10)
triggertip.setBorderWidth(0)
triggertip.move(5,-10)
trigger.add(triggerfinger)
trigger.add(triggertip)
trigger.setDepth(60)
holdingfingers = Polygon(Point(90,100),Point(70,120),Point(70,150),Point(100,170),Point(100,140),Point(90,134))
holdingfingers.setFillColor((249/1.2, 184/1.2, 149/1.2)) #(249, 184, 149) no need to go there
holdingfingers.setBorderWidth(0)
holdingfingers.setDepth(40)
fingerpath1= Path(Point(90,100),Point(80,110))
fingerpath1.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath3 = Path(Point(79,126),Point(100,140))
fingerpath3.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath4 = Path(Point(75,115),Point(70,120),Point(70,125))
fingerpath5 = Spline(Point(70,125),Point(70,130),Point(76,134))
fingernail1= Circle(5,centerPt=Point(100,145))
fingernail1.setFillColor((253, 221, 216))
fingernail1.setBorderColor((253, 221, 216))
fingerpath6 = Path(Point(76,134),Point(100,150))
fingernail2= Circle(5,centerPt=Point(100,155))
fingernail2.setBorderColor((253, 221, 216))
fingernail2.setFillColor((253, 221, 216))
fingerpath7 = Path(Point(70,125),Point(70,130),Point(70,135))
fingerpath8 = Spline(Point(70,135),Point(70,140),Point(76,144))
fingerpath9 = Path(Point(76,144),Point(100,160))
fingernail3= Circle(5,centerPt=Point(100,165))
fingernail3.setBorderColor((253, 221, 216))
fingernail3.setFillColor((253, 221, 216))
fingerpath10 = Path(Point(70,135),Point(70,140),Point(70,145))
fingerpath11 = Spline(Point(70,145),Point(70,150),Point(76,154))
fingerpath12 = Path(Point(76,154),Point(100,170))
fingerpath4.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath5.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath6.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath7.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath8.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath9.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath10.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath11.setBorderColor((249/1.5, 184/1.5, 149/1.5))
fingerpath12.setBorderColor((249/1.5, 184/1.5, 149/1.5))
thumb1 = Polygon(Point(135,130),Point(105,110),Point(105,125),Point(135,145),Point(170,190),Point(170,154))
thumb2 = Circle(5,centerPt=Point(105,117))
thumb2.setFillColor((253, 221, 216))
thumb2.setBorderWidth(0)
hand = Polygon(Point(90,100), Point(150,140),Point(155,150),Point(170,155),Point(290,300),Point(260,320),Point(149,198),Point(140,195),Point(90,164.2))
hand.setFillColor((249/1.2, 184/1.2, 149/1.2))
hand.setBorderWidth(0)
hand.setDepth(100)
thumb1.setFillColor((249/1.2, 184/1.2, 149/1.2))
thumb1.setBorderWidth(0)
fingerpath=Layer()
fingerpath.add(thumb1)
fingerpath.add(thumb2)
fingerpath.add(fingernail1)
fingerpath.add(fingernail2)
fingerpath.add(fingernail3)
fingerpath.add(fingerpath3)
fingerpath.add(fingerpath4)
fingerpath.add(fingerpath5)
fingerpath.add(fingerpath6)
fingerpath.add(fingerpath7)
fingerpath.add(fingerpath8)
fingerpath.add(fingerpath9)
fingerpath.add(fingerpath10)
fingerpath.add(fingerpath11)
fingerpath.add(fingerpath12)
fingerpath.setDepth(0)
fingerpath.move(10,20)
gunwhole = Layer()
gunwhole.add(fingerpath)
gun.add(hand)
gun.add(holdingfingers)
gun.add(flyingbullet)
gun.add(triggertip)
gun.add(trigger)
mag.add(bullet2)
mag.add(bullet)
mag.move(0,100)
gun.add(mag)
gun.add(gunhandleleft)
gun.add(gunfinger)
gun.add(gunfingerpull)
gun.add(gunhandlebottom)
gun.add(gunhandleback)
gun.add(gunhandletop)
gun.add(gunhandleright)
gun.add(gunhandlefront)
gun.add(gunhandlebtm)
gun.move(10,20)
gunwhole.add(gun)
gunwhole.setDepth(-50)
c.add(gunwhole)
mag.move(0,-100)
gunwhole.move(950,480)
lefthand = Polygon(Point(150,0),Point(90,20),Point(60,30),Point(90,20),Point(81,16),Point(51,26),Point(41,36),Point(-55,72),Point(-25,92),Point(96,54),Point(126,44),Point(186,24),Point(177,18),Point(117,38),Point(177,18),Point(168,12),Point(108,32),Point(168,12),
Point(159,6),Point(99,26),Point(159,6))
lefthand.move(0,350)
lefthand.setBorderColor((249/1.5, 184/1.5, 149/1.5))
lefthand.setFillColor((249/1.2, 184/1.2, 149/1.2))
mag.setDepth(60)
lefthand.setDepth(70)
lefthand1 = Polygon(Point(150,0),Point(90,20),Point(60,30),Point(90,20),Point(81,16),Point(51,26),Point(41,36),Point(-55,62),Point(-55,72),Point(-25,92),Point(96,54),Point(126,44),Point(186,24),Point(186,14),Point(177,18),Point(117,38),Point(177,18),Point(168,12),Point(108,32),Point(168,12),
Point(159,6),Point(99,26),Point(159,6))
fingertip = Circle(6.26,centerPt=Point(122.5,15))
fingertip.setFillColor((253, 221, 216))
fingertip.setBorderColor((253, 221, 216))
fingertip.stretch(1.2,0.8)
fingertip.rotate(0)
fingertip.move(26,340)
fingertip.setDepth(75)
fingertip1 = fingertip.clone()
fingertip1.move(11,6)
fingertip2 = fingertip1.clone()
fingertip2.move(11,6)
fingertip3 = fingertip2.clone()
fingertip3.move(11,6)
thumbtip = fingertip.clone()
thumbtip.setFillColor((253, 221, 216))
thumbtip.setBorderColor((253, 221, 216))
thumbtip.move(-60,15)
lefthand1.move(0,350)
lefthand1.setFillColor((249/1.5, 184/1.5, 149/1.5))
lefthand1.setBorderColor((249/1.5, 184/1.5, 149/1.5))
lefthand1.move(0,10)
lefthand1.setDepth(80)
lefthand2 = Layer()
lefthand2.add(lefthand)
lefthand2.add(lefthand1)
lefthand2.add(fingertip)
lefthand2.add(fingertip1)
lefthand2.add(fingertip2)
lefthand2.add(fingertip3)
lefthand2.add(thumbtip)
c.add(lefthand2)
lefthand2.setDepth(40)
lefthand2.rotate(-10)
lefthand2.move(870,400)
lefthand2.move(20,-70)
bulletfired= Polygon(Point(120,130),Point(132,130),Point(126,115))
bulletfired.setBorderColor("yellow")
bulletfired.setFillColor("orange")
bulletfired.adjustReference(6,-15)
bulletfired.rotate(-45)
bulletfired.moveTo(976,465)
bulletfired.setDepth(75)
# spark = Image("/home/kali/Pictures/Finished/spark2.png")
# spark = Image("./Graphics/spark2.png")
# spark = Image(os.path.join(sys.path[0], "spark2.png"))
spark_img = ""
spark = Image("base64:" + spark_img)
spark.move(50,20)
spark.setDepth(100)
bullethit_center = Circle(5)
bullethit_center.setFillColor("black")
bullethit_center.setDepth(15)
bullethit_outside = Circle(10)
bullethit_outside.setFillColor("grey")
bullethit_outside.setDepth(30)
bullethit_outside.setBorderColor("grey")
bullethit = Layer()
bullethit.add(bullethit_center)
bullethit.add(bullethit_outside)
bullethit.move(c.getWidth()/2,c.getHeight()/2)
crosshairs = Layer()
crosshair1 = Path(Point(0,-20),Point(0,-5))
crosshair1.setBorderColor((80,80,80))
crosshair1.setBorderWidth(5)
crosshair2 = Path(Point(0,20),Point(0,5))
crosshair2.setBorderWidth(5)
crosshair2.setBorderColor((80,80,80))
crosshair3 = Path(Point(-20,0),Point(-5,0))
crosshair3.setBorderWidth(5)
crosshair3.setBorderColor((80,80,80))
crosshair4 = Path(Point(20,0),Point(5,0))
crosshair4.setBorderWidth(5)
crosshair4.setBorderColor((80,80,80))
crosshairs.add(crosshair1)
crosshairs.add(crosshair2)
crosshairs.add(crosshair3)
crosshairs.add(crosshair4)
crosshairs.move(c.getWidth()/2,c.getHeight()/2)
crosshairs.setDepth(-50)
c.add(crosshairs)
def reload():
    global no_bullets
    mag.remove(bullet)
    mag.remove(bullet2)
    for i in range(80):
        gunwhole.move(0,-1)
        lefthand2.move(0,1)
        bullet.move(0,-1)
        bullet2.move(0,-1)
        sleep(0.001)
    for i in range(80):
        mag.move(0,1)
        bullet.move(0,1)
        bullet2.move(0,1)
        sleep(0.001)
    for i in range(200):
        mag.move(0,1)
        bullet.move(0,1)
        bullet2.move(0,1)
        sleep(0.001)
    mag.add(bullet)
    mag.add(bullet2)
    bullet.move(0,-200)
    bullet2.move(0,-200)
    mag.move(0,-100)
    for i in range(40):
        mag.move(0,-1)
        sleep(0.001)
    for i in range(140):
        mag.move(0,-1)
        lefthand2.move(0,-1)
        sleep(0.001)
    for i in range(80):
        lefthand2.move(0,1)
        gunwhole.move(0,1)
        sleep(0.001)
    for i in range(10):
        lefthand2.move(0,-1)
        sleep(0.001)
    if no_bullets <=0:
        for i in range(10):
            trigger.move(1,1)
            triggertip.move(1,1)
            gunfingerpull.move(1,1)
            sleep(0.001)
        for i in range(10):
            gunhandletop.move(-1,-1)
            gunaim.move(-1,-1)
            trigger.move(-1,-1)
            triggertip.move(-1,-1)
            gunfingerpull.move(-1,-1)
            gunbarrel.setPoint(Point(135 - i,71.666 - i),-3)
            gunbarrel.setPoint(Point(115 - i,78.334 - i),-2)
            sleep(0.001)
    else:
        pass
    no_bullets=12

gunwhole.move(-100,100)
lefthand2.move(-100,100)
bulletfired.move(-100,100)
def fire(target=Point(c.getWidth()/2,(c.getHeight()/2)),position=bulletfired.getReferencePoint()):
    global no_bullets
    if no_bullets >0:
        c.add(bulletfired)
        gunwhole.add(spark)
        sleep(0.1)
        gunwhole.remove(spark)
        bulletfired.setDepth(-10)
        for i in range(10):
            gunhandletop.move(1,1)
            gunaim.move(1,1)
            crosshair1.move(0,-1)
            crosshair2.move(0,1)
            crosshair3.move(-1,0)
            crosshair4.move(1,0)
            trigger.move(1,1)
            triggertip.move(1,1)
            gunfingerpull.move(1,1)
            gunbarrel.setPoint(Point(125 + i,61.666 + i),-3)
            gunbarrel.setPoint(Point(105 + i,68.334 + i),-2)
            bulletfired.move(-1*(position.getX()-target.getX())/70,-1*(position.getY()-target.getY())/70)
            bulletfired.scale(0.98995)
            # sleep(0.001)
        flyingbullet.setDepth(0)
        for i in range(10):
            gunhandletop.move(-1,-1)
            flyingbullet.move(2,-4)
            crosshair1.move(0,1)
            crosshair2.move(0,-1)
            crosshair3.move(1,0)
            crosshair4.move(-1,0)
            gunaim.move(-1,-1)
            trigger.move(-1,-1)
            triggertip.move(-1,-1)
            gunfingerpull.move(-1,-1)
            gunbarrel.setPoint(Point(135 - i,71.666 - i),-3)
            gunbarrel.setPoint(Point(115 - i,78.334 - i),-2)
            bulletfired.move(-1*(position.getX()-target.getX())/70,-1*(position.getY()-target.getY())/70)
            bulletfired.scale(0.98995)       
            # sleep(0.001)
        for i in range(30):
            flyingbullet.move(2,4)
            bulletfired.move(-1*(position.getX()-target.getX())/70,-1*(position.getY()-target.getY())/70)
            bulletfired.scale(0.98995)     
            # sleep(0.001)
        for i in range(20):
            flyingbullet.move(1.2,4)
            bulletfired.move(-1*(position.getX()-target.getX())/70,-1*(position.getY()-target.getY())/70)
            bulletfired.scale(0.98995)      
            # sleep(0.001)
        flyingbullet.setDepth(70)
        flyingbullet.move(-104,-160)
        c.remove(bulletfired)
        bulletfired.moveTo(position.getX(),position.getY())
        bulletfired.scale(2.0280179818)
        no_bullets-=1
    elif no_bullets==0:
        for i in range(10):
            gunhandletop.move(1,1)
            gunaim.move(1,1)
            trigger.move(1,1)
            triggertip.move(1,1)
            gunfingerpull.move(1,1)
            gunbarrel.setPoint(Point(125 + i,61.666 + i),-3)
            gunbarrel.setPoint(Point(105 + i,68.334 + i),-2)
            sleep(0.005)
        for i in range(10):
            trigger.move(-1,-1)
            triggertip.move(-1,-1)
            gunfingerpull.move(-1,-1)
            sleep(0.005)
        no_bullets-=1
    else:
        for i in range(10):
            trigger.move(1,1)
            triggertip.move(1,1)
            gunfingerpull.move(1,1)
            sleep(0.001)
        for i in range(10):
            trigger.move(-1,-1)
            triggertip.move(-1,-1)
            gunfingerpull.move(-1,-1)
            sleep(0.001)
sandbag_fill = ClosedSpline(Point(10,0),Point(0,0),Point(0,10),Point(0,20),Point(0,60),Point(0,70),Point(0,70),Point(0,80),Point(10,80),Point(20,80),Point(80,80),
Point(150,80),Point(160,80),Point(160,70),Point(160,10),Point(160,0),Point(150,0))
sandbag_fill.setFillColor((218, 178, 136))
sandbag_fill.setBorderColor((181, 121, 58)) #lightgoldenrod
sandbag_vertical_line1= Path(Point(40,1),Point(40,79))
sandbag_vertical_line1.setDepth(0)
sandbag_vertical_line1.setBorderColor((181, 121, 58))
sandbag_vertical_line1.setBorderWidth(3)
sandbag_vertical_line2 = sandbag_vertical_line1.clone()
sandbag_vertical_line2.move(40,0)
sandbag_vertical_line3 = sandbag_vertical_line2.clone()
sandbag_vertical_line3.move(40,0)
sandbag_vertical_lines = Layer()
sandbag_vertical_lines.add(sandbag_vertical_line1)
sandbag_vertical_lines.add(sandbag_vertical_line2)
sandbag_vertical_lines.add(sandbag_vertical_line3)
sandbag_vertical_lines.setDepth(0)
sandbag_horizontal_line1 = Spline(Point(1,20),Point(30,20), Point(39,20),Point(39,1),Point(39,1))
sandbag_horizontal_line1.setDepth(0)
sandbag_horizontal_line1.setBorderColor((181, 121, 58))
sandbag_horizontal_line2 = sandbag_horizontal_line1.clone()
sandbag_horizontal_line2.move(40,0)
sandbag_horizontal_line3 = sandbag_horizontal_line2.clone()
sandbag_horizontal_line3.move(40,0)
sandbag_horizontal_line4 = sandbag_horizontal_line3.clone()
sandbag_horizontal_line4.move(40,0)
sandbag_horizontal_lines1 = Layer()
sandbag_horizontal_lines1.add(sandbag_horizontal_line1)
sandbag_horizontal_lines1.add(sandbag_horizontal_line2)
sandbag_horizontal_lines1.add(sandbag_horizontal_line3)
sandbag_horizontal_lines1.add(sandbag_horizontal_line4)
sandbag_horizontal_lines1.setDepth(0)
sandbag_horizontal_lines2 = sandbag_horizontal_lines1.clone()
sandbag_horizontal_lines2.move(0,20)
sandbag_horizontal_lines3 = sandbag_horizontal_lines2.clone()
sandbag_horizontal_lines3.move(0,20)
sandbag_horizontal_lines = Layer()
sandbag_horizontal_lines.add(sandbag_horizontal_lines1)
sandbag_horizontal_lines.add(sandbag_horizontal_lines2)
sandbag_horizontal_lines.add(sandbag_horizontal_lines3)
sandbag_horizontal_lines.setDepth(0)
sandbag_horizontal_lines2 = sandbag_horizontal_lines.clone()
sandbag_horizontal_lines2.move(0,10)
sandbag_horizontal_line_top1 = Spline(Point(1,10),Point(30,10), Point(39,10),Point(39,1),Point(39,1))
sandbag_horizontal_line_top1.setDepth(0)
sandbag_horizontal_line_top1.setBorderColor((181, 121, 58))
sandbag_horizontal_line_top2 = sandbag_horizontal_line_top1.clone()
sandbag_horizontal_line_top2.move(40,0)
sandbag_horizontal_line_top3 = sandbag_horizontal_line_top2.clone()
sandbag_horizontal_line_top3.move(40,0)
sandbag_horizontal_line_top4 = sandbag_horizontal_line_top3.clone()
sandbag_horizontal_line_top4.move(40,0)
sandbag_horizontal_line_top = Layer()
sandbag_horizontal_line_top.add(sandbag_horizontal_line_top1)
sandbag_horizontal_line_top.add(sandbag_horizontal_line_top2)
sandbag_horizontal_line_top.add(sandbag_horizontal_line_top3)
sandbag_horizontal_line_top.add(sandbag_horizontal_line_top4)
sandbag_horizontal_line_top.setDepth(0)
sandbag = Layer()
sandbag.add(sandbag_horizontal_lines)
sandbag.add(sandbag_horizontal_lines2)
sandbag.add(sandbag_horizontal_line_top)
sandbag.add(sandbag_vertical_lines)
sandbag.add(sandbag_fill)
sandbag.move(50,50)
sandbag.scale(2)
sandbag_fill_behind = sandbag_fill.clone()
sandbag_fill_behind.setPoint(Point(5,90),8)
sandbag_fill_behind.setPoint(Point(165,10),15)
sandbag_fill_behind.addPoint(Point(161,2),16)
sandbag_fill_behind.addPoint(Point(160,0),17)
sandbag_fill_behind.addPoint(Point(157,0),18)
sandbag_fill_behind.setDepth(60)
sandbag_fill_behind.move(-5,-10)
sandbag_behind_vertical_line1 = Spline(Point(40,1),Point(40,0),Point(39,-3),Point(36,-9),Point(35,-10),Point(30,-10))
sandbag_behind_vertical_line1.setBorderColor((181, 121, 58))#light
sandbag_behind_vertical_line1.setBorderWidth(1)
sandbag_behind_vertical_line1.setDepth(-20)
sandbag_behind_vertical_line2 = sandbag_behind_vertical_line1.clone()
sandbag_behind_vertical_line2.move(40,0)
sandbag_behind_vertical_line3 = sandbag_behind_vertical_line2.clone()
sandbag_behind_vertical_line3.move(40,0)
sandbag_behind_vertical_line4 = sandbag_behind_vertical_line3.clone()
sandbag_behind_vertical_line4.move(39,0)
sandbag_behind_vertical_line5 = sandbag_behind_vertical_line1.clone()
sandbag_behind_vertical_line5.deletePoint()
sandbag_behind_vertical_line5.move(-39,0)
sandbag_behind_vertical_line6 = Path(Point(0,10),Point(-5,0))
sandbag_behind_vertical_line6.setBorderColor((181, 121, 58))#l
sandbag_behind_vertical_line7 = sandbag_behind_vertical_line6.clone()
sandbag_behind_vertical_line7.move(0,10)
sandbag_behind_vertical_line8 = sandbag_behind_vertical_line7.clone()
sandbag_behind_vertical_line8.move(0,10)
sandbag_behind_vertical_line9 = sandbag_behind_vertical_line8.clone()
sandbag_behind_vertical_line9.move(0,10)
sandbag_behind_vertical_line10 = sandbag_behind_vertical_line9.clone()
sandbag_behind_vertical_line10.move(0,10)
sandbag_behind_vertical_line11 = sandbag_behind_vertical_line10.clone()
sandbag_behind_vertical_line11.move(0,10)
sandbag_behind_vertical_line12 = sandbag_behind_vertical_line11.clone()
sandbag_behind_vertical_line12.move(0,10)
sandbag_behind_vertical_line = Layer()
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line1)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line2)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line3)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line4)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line5)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line6)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line7)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line8)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line9)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line10)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line11)
sandbag_behind_vertical_line.add(sandbag_behind_vertical_line12)
sandbag_behind_vertical_line.setDepth(0)
sandbag.add(sandbag_fill_behind)
sandbag.add(sandbag_behind_vertical_line)
sandbag.move(900,450)
sandbag2 = sandbag.clone()
sandbag2.move(-600,0)
sandbag2.flip()
everything = Layer()
everything.add(sandbag)
everything.add(sandbag2)
c.add(everything)
targetpole1 = Polygon(Point(30,0),Point(0,30),Point(0,100),Point(30,130),Point(40,130),Point(40,200),Point(60,200),Point(60,130),Point(70,130), Point(100,100),Point(100,30),Point(70,0))
targetpole1.setFillColor('grey')
targetpole1.setBorderWidth(2)
target = Polygon(Point(65,10),Point(50,5),Point(35,10),Point(35,30),Point(10,45),Point(10,100),Point(30,120),Point(70,120),Point(90,100),Point(90,45),Point(65,30))
target.setFillColor((60,60,60))
circle1 = Circle(30,centerPt=Point(50,77.5))
circle1.setFillColor("green")
circle1.setDepth(10)
circle2 = Circle(20,centerPt=Point(50,77.5))
circle2.setFillColor((60,60,60))
circle2.setDepth(0)
good_targetpole = Layer()
good_targetpole.add(targetpole1)
good_targetpole.add(target)
good_targetpole.add(circle1)
good_targetpole.add(circle2)
good_targetpole.move(50,50)
bad_targetpole = good_targetpole.clone()
bad_targetpole.getContents()[-2].setFillColor("red")
bad_targetpole.move(150,0)
def hit(pole = good_targetpole):
    targetpole = pole.getContents()[0]
    in_targetpole = pole.getContents()[1]
    circlep1=pole.getContents()[2]
    circlep2=pole.getContents()[3]
    bullet = pole.getContents()[4]
    p1 = targetpole.getPoint(0)
    p2 = targetpole.getPoint(1)
    p3 = targetpole.getPoint(2)
    p4 = targetpole.getPoint(3)
    p5 = targetpole.getPoint(4)
    p6 = targetpole.getPoint(5)
    p7 = targetpole.getPoint(6)
    p8 = targetpole.getPoint(7)
    p9= targetpole.getPoint(8)
    p10 = targetpole.getPoint(9)
    p11 = targetpole.getPoint(10)
    p12 = targetpole.getPoint(11)
    ip1 = in_targetpole.getPoint(0)
    ip2 = in_targetpole.getPoint(1)
    ip3 = in_targetpole.getPoint(2)
    ip4 = in_targetpole.getPoint(3)
    ip5 = in_targetpole.getPoint(4)
    ip6 = in_targetpole.getPoint(5)
    ip7 = in_targetpole.getPoint(6)
    ip8 = in_targetpole.getPoint(7)
    ip9= in_targetpole.getPoint(8)
    ip10 = in_targetpole.getPoint(9)
    ip11 = in_targetpole.getPoint(10)
    in_targetpole.adjustReference(-15,138.75)
    for i in range(10):
        targetpole.setPoint(Point(p1.getX(),targetpole.getPoint(0).getY()+(200-p1.getY())/20),0)
        targetpole.setPoint(Point(p2.getX(),targetpole.getPoint(1).getY()+(200-p2.getY())/20),1)
        targetpole.setPoint(Point(p3.getX(),targetpole.getPoint(2).getY()+(200-p3.getY())/20),2)
        targetpole.setPoint(Point(p4.getX(),targetpole.getPoint(3).getY()+(200-p4.getY())/20),3)
        targetpole.setPoint(Point(p5.getX(),targetpole.getPoint(4).getY()+(200-p5.getY())/20),4)
        targetpole.setPoint(Point(p6.getX(),targetpole.getPoint(5).getY()+(200-p6.getY())/20),5)
        targetpole.setPoint(Point(p7.getX(),targetpole.getPoint(6).getY()+(200-p7.getY())/20),6)
        targetpole.setPoint(Point(p8.getX(),targetpole.getPoint(7).getY()+(200-p8.getY())/20),7)
        targetpole.setPoint(Point(p9.getX(),targetpole.getPoint(8).getY()+(200-p9.getY())/20),8)
        targetpole.setPoint(Point(p10.getX(),targetpole.getPoint(9).getY()+(200-p10.getY())/20),9)
        targetpole.setPoint(Point(p11.getX(),targetpole.getPoint(10).getY()+(200-p11.getY())/20),10)
        targetpole.setPoint(Point(p12.getX(),targetpole.getPoint(11).getY()+(200-p12.getY())/20),11)
        in_targetpole.setPoint(Point(ip1.getX(),in_targetpole.getPoint(0).getY()+(210-ip1.getY())/20),0)
        in_targetpole.setPoint(Point(ip2.getX(),in_targetpole.getPoint(1).getY()+(210-ip2.getY())/20),1)
        in_targetpole.setPoint(Point(ip3.getX(),in_targetpole.getPoint(2).getY()+(210-ip3.getY())/20),2)
        in_targetpole.setPoint(Point(ip4.getX(),in_targetpole.getPoint(3).getY()+(210-ip4.getY())/20),3)
        in_targetpole.setPoint(Point(ip5.getX(),in_targetpole.getPoint(4).getY()+(210-ip5.getY())/20),4)
        in_targetpole.setPoint(Point(ip6.getX(),in_targetpole.getPoint(5).getY()+(199.01-ip6.getY())/20),5)
        in_targetpole.setPoint(Point(ip7.getX(),in_targetpole.getPoint(6).getY()+(199.01-ip7.getY())/20),6)
        in_targetpole.setPoint(Point(ip8.getX(),in_targetpole.getPoint(7).getY()+(199.01-ip8.getY())/20),7)
        in_targetpole.setPoint(Point(ip9.getX(),in_targetpole.getPoint(8).getY()+(199.01-ip9.getY())/20),8)
        in_targetpole.setPoint(Point(ip10.getX(),in_targetpole.getPoint(9).getY()+(210-ip10.getY())/20),9)
        in_targetpole.setPoint(Point(ip11.getX(),in_targetpole.getPoint(10).getY()+(210-ip11.getY())/20),10)
        circlep1.move(0,6.25)
        circlep1.stretch(1,0.89)
        circlep2.move(0,6.25)
        circlep2.stretch(1,0.89)
        bullet.move(0,6.75)
        bullet.stretch(1,0.89)
        # in_targetpole.scale(0.98)
        # in_targetpole.move(0,-0.1)

main_wall_top = Polygon(Point(0,0), Point(0,c.getHeight()/2),Point(c.getWidth(),c.getHeight()/2),Point(c.getWidth(),0))
main_wall_top.setFillColor((181, 87, 5))
# door = Polygon(Point(600,500),Point(600,c.getHeight()),Point(800,c.getHeight()),Point(800,500))
main_wall_bottom = main_wall_top.clone()
main_wall_bottom.addPoint(Point(600,c.getHeight()/2),2)
main_wall_bottom.addPoint(Point(600,c.getHeight()/2-320),3)
main_wall_bottom.addPoint(Point(800,c.getHeight()/2-320),4)
main_wall_bottom.addPoint(Point(800,c.getHeight()/2),5)
main_wall_bottom.stretch(1,1.0244)
main_wall_bottom.move(0,400)
main_wall_bottom.setFillColor((158/1.5, 46/1.5, 2/1.5))
wall = Layer()
wood1 = Path(Point(0,30),Point(c.getWidth(),30))
wood2 = Path(Point(0,60),Point(c.getWidth(),60))
wood3 = Path(Point(0,90),Point(c.getWidth(),90))
wood4 = Path(Point(0,120),Point(c.getWidth(),120))
wood5 = Path(Point(0,150),Point(c.getWidth(),150))
wood6 = Path(Point(0,180),Point(c.getWidth(),180))
wood7 = Path(Point(0,210),Point(c.getWidth(),210))
wood8 = Path(Point(0,240),Point(c.getWidth(),240))
wood9 = Path(Point(0,270),Point(c.getWidth(),270))
wood10 = Path(Point(0,300),Point(c.getWidth(),300))
wood11 = Path(Point(0,330),Point(c.getWidth(),330))
wood12 = Path(Point(0,360),Point(c.getWidth(),360))
wood12.move(0,-10)
wall.add(main_wall_top)
wall.add(main_wall_bottom)
wall.add(wood1)
wall.add(wood2)
wall.add(wood3)
wall.add(wood4)
wall.add(wood5)
wall.add(wood6)
wall.add(wood7)
wall.add(wood8)
wall.add(wood9)
wall.add(wood10)
wall.add(wood11)
wall.add(wood12)
balcony_main = Polygon(Point(0,240),Point(0,210),Point(c.getWidth(),210),Point(c.getWidth(),240))
balcony_main.setFillColor("grey")
balcony_side1 = Polygon(Point(0,240),Point(-10,260),Point(-10,230),Point(0,210)) #changed due to problems but should be -15,260 and so forth
balcony_side1.setFillColor("darkgray")
balcony_side2 = balcony_side1.clone()
balcony_side2.setDepth(52)
balcony_side2.move(c.getWidth(),0)
balcony_column1 = Polygon(Point(155,240),Point(155,360),Point(185,360),Point(185,240))
balcony_column1.setFillColor("grey")
balcony_column1.setBorderColor("grey")
balcony_column2 = balcony_column1.clone()
balcony_column2.move(170,0)
balcony_column3 = balcony_column2.clone()
balcony_column3.move(170,0)
balcony_column4 = balcony_column3.clone()
balcony_column4.move(170,0)
balcony_column5 = balcony_column4.clone()
balcony_column5.move(170,0)
balcony_column6 = balcony_column5.clone()
balcony_column6.move(170,0)
balcony_column7 = balcony_column6.clone()
balcony_column7.move(170,0)

balcony_column1_side= Polygon(Point(155,240),Point(148,240),Point(148,360),Point(155,360))
balcony_column1_side.setFillColor("darkgray")
balcony_column2_side = balcony_column1_side.clone()
balcony_column2_side.move(170,0)
balcony_column3_side = balcony_column2_side.clone()
balcony_column3_side.move(170,0)
balcony_column4_side = balcony_column3_side.clone()
balcony_column4_side.move(170,0)
balcony_column5_side = balcony_column4_side.clone()
balcony_column5_side.move(170,0)
balcony_column6_side = balcony_column5_side.clone()
balcony_column6_side.move(170,0)
balcony_column7_side = balcony_column6_side.clone()
balcony_column7_side.move(170,0)
balcony_down = balcony_main.clone()
balcony_down.move(0,140)
balcony_down.setDepth(0)
balcony_down.setFillColor((125, 60, 2))

balcony_down_side1 = balcony_side1.clone()
balcony_down_side1.move(0,140)
balcony_down_side1.setFillColor((125, 37, 2))
balcony_down_side2 = balcony_side2.clone()
balcony_down_side2.move(0,140)
balcony_beneath = balcony_down.clone()
balcony_beneath.setPoint(Point(-10,230),0)
balcony_beneath.setPoint(Point(c.getWidth()-10,230),-1)
balcony_beneath.setFillColor((125, 37, 2))
balcony_beneath.move(0,30)
beneath_line1 = Path(Point(c.getWidth()/2,380), Point(c.getWidth()/2,400))
beneath_line1.setDepth(-10)
beneath_line2 = beneath_line1.clone()
beneath_line2.move(40,0)
beneath_line2.rotate(10)
beneath_line3 = beneath_line2.clone()
beneath_line3.move(40,0)
beneath_line3.scale(1.05)
beneath_line3.rotate(10)
beneath_line4 = beneath_line3.clone()
beneath_line4.move(40,0)
beneath_line4.scale(1.05)
beneath_line4.rotate(10)
beneath_line5 = beneath_line4.clone()
beneath_line5.move(40,0)
beneath_line5.scale(1.15)
beneath_line5.rotate(10)
beneath_line6 = beneath_line5.clone()
beneath_line6.move(50,0)
beneath_line6.setBorderWidth(0.95)
beneath_line6.scale(1.2)
beneath_line6.rotate(10)
beneath_line7 = beneath_line6.clone()
beneath_line7.move(60,0)
beneath_line7.setBorderWidth(0.85)
beneath_line7.scale(1.35)
beneath_line7.rotate(10)
beneath_line8 = beneath_line7.clone()
beneath_line8.setBorderWidth(0.8)
beneath_line8.move(80,0)
beneath_line8.scale(1.4)
beneath_line8.rotate(10)
beneath_line9 = beneath_line8.clone()
beneath_line9.setBorderWidth(0.7)
beneath_line9.move(240,2)
beneath_line9.scale(1.89)
beneath_line9.rotate(10)
beneath_line10 = beneath_line8.clone()
beneath_line10.setBorderWidth(0.7)
beneath_line10.move(100,2)
beneath_line10.scale(1.2)
beneath_line10.rotate(5)
balcony = Layer()
balcony_right = Layer()
balcony.add(balcony_main)
balcony.add(balcony_down)
balcony_right.add(beneath_line1)
balcony_right.add(beneath_line2)
balcony_right.add(beneath_line3)
balcony_right.add(beneath_line4)
balcony_right.add(beneath_line5)
balcony_right.add(beneath_line6)
balcony_right.add(beneath_line7)
balcony_right.add(beneath_line8)
balcony_right.add(beneath_line9)
balcony_right.add(beneath_line10)
balcony.add(balcony_beneath)
balcony.add(balcony_column1)
balcony.add(balcony_column2)
balcony.add(balcony_column3)
balcony.add(balcony_column4)
balcony.add(balcony_column5)
balcony.add(balcony_column6)
balcony.add(balcony_column7)
balcony.add(balcony_column1_side)
balcony.add(balcony_column2_side)
balcony.add(balcony_column3_side)
balcony.add(balcony_column4_side)
balcony.add(balcony_column5_side)
balcony.add(balcony_column6_side)
balcony.add(balcony_column7_side)
balcony.add(balcony_side1)
balcony.add(balcony_side2)
balcony.add(balcony_down_side1)
balcony.add(balcony_down_side2)
balcony_right.setDepth(0)
balcony_right.adjustReference(680,380)
balcony_left = balcony_right.clone()
balcony_left.flip()
balcony_left.setDepth(0)
balcony.add(balcony_left)
balcony.add(balcony_right)
balcony.setDepth(40)
balcony.move(3,0)
window1 = Polygon(Point(40,470),Point(40,670),Point(300,670),Point(300,470))
window1.setFillColor((125, 37, 2))
window1.move(100,0)
window2 = window1.clone()
window2.adjustReference(540,-60)
window2.flip()
window2.adjustReference(540,60)
m = 60
inside_window2= Path(Point(40,570+m),Point(270,570+m),Point(270,470),Point(270,570+m),Point(300,570+m+40))
inside_window2.setBorderWidth(6)
inside_window2.setBorderColor(( 69/2,139/2,116/2))
inside_window2.move(920,0)
inside_window2.setDepth(0)
inside_window1 = Path(Point(40,570+m),Point(300,570+m))
inside_window1.setBorderWidth(6)
inside_window1.setBorderColor(( 69/2,139/2,116/2))
inside_window1.move(100,0)
inside_window1.setDepth(0)
inside_ground1 = Polygon(Point(300,570+m+40),Point(300,670),Point(40,670),Point(40,570+m),Point(270,570+m))
inside_ground1.move(920,0)
inside_ground1.setDepth(49)
inside_ground1.setFillColor((222/1.25,184/1.25,135/1.25))
inside_walls1= Polygon(Point(300,570+m+40),Point(300,470),Point(40,470),Point(40,570+m),Point(270,570+m))
inside_walls1.move(920,0)
inside_walls1.setDepth(49)
inside_walls1.setFillColor(( 69/1.5,139/1.5,116/1.5))
inside_walls2 = Polygon(Point(40,470),Point(40,570+m),Point(300,570+m),Point(300,470))
inside_walls2.move(100,0)
inside_walls2.setDepth(49)
inside_walls2.setFillColor(( 69/1.5,139/1.5,116/1.5))
inside_ground2 = Polygon(Point(40,670),Point(40,570+m),Point(300,570+m),Point(300,670))
inside_ground2.move(100,0)
inside_ground2.setDepth(49)
inside_ground2.setFillColor((222/1.25,184/1.25,135/1.25))
wall.add(inside_window2)
wall.add(inside_window1)
wall.add(inside_ground1)
wall.add(inside_walls1)
wall.add(inside_walls2)
wall.add(inside_ground2)
door = Polygon(Point(600,500),Point(600,c.getHeight()),Point(800,c.getHeight()),Point(800,500))
door.setFillColor("brown")
wall.add(window1)
everything.add(balcony)

wall.add(window2)
wall.adjustReference(c.getWidth()/2,c.getHeight()/2)
wall.scale(0.25)
balcony.adjustReference(c.getWidth()/2,c.getHeight()/2+10)
balcony.scale(0.25)
balcony.move(-5,-200)
wall_behind = Polygon(Point(-15,60),Point(-15,c.getHeight()-60),Point(0,c.getHeight()),Point(0,0))
wall_behind.setFillColor((125/1.5, 37/1.5, 2/1.5))
wall.add(wall_behind)
ground = Polygon(Point(0,0),Point(c.getWidth(),0),Point(c.getWidth(),c.getHeight()),Point(0,c.getHeight()))
ground.setDepth(150)
ground.adjustReference(w/2,h/2)
ground.scale(2)
ground.setFillColor((139/2, 69/2, 19/2))
sky= ClosedSpline(Point(0,0),Point(0,0),Point(0,0),Point(c.getWidth(),0),Point(c.getWidth(),0),Point(c.getWidth(),0),Point(c.getWidth(),c.getHeight()/2),Point(c.getWidth(),c.getHeight()/2),Point(c.getWidth(),c.getHeight()/2),
Point(c.getWidth()/2,c.getHeight()/2 - 50),Point(0,c.getHeight()/2),Point(0,c.getHeight()/2),Point(0,c.getHeight()/2))
sky.adjustReference(w/2,h/2)
sky.setDepth(120)
sky.scale(2)
sky.setFillColor("skyblue")
everything.add(sky)
everything.add(ground)
# everything.add(bush)
tree.scale(0.5)
tree.move(400,-300)
everything.add(tree)
bush3 = bush.clone()
bush3.scale(0.5)
bush3.move(-100,-200)
everything.add(bush3)
wall.move(-5,-200)

#Inside
walls1 = Polygon(Point(0,0),Point(0,h),Point(w/2 - 150, h/2 + 100),Point(w/2-150,h/2-100))
walls1.setFillColor(( 69/1.5,139/1.5,116/1.5))
walls1.setBorderColor(( 69/2,139/2,116/2))
walls2 = walls1.clone()
walls2.adjustReference(w/2,h/2)
walls2.flip()
walls3= Polygon(Point(0,0),Point(w,0),Point(w/2+150+34,h/2-98-20),Point(w/2-150-34,h/2-98-20))#Point(w/2 + 150, h/2 - 98),Point(w/2-150,h/2-98))
walls3.setFillColor("grey")
walls3.setDepth(50)
open_wall = Polygon(Point(w/2 + 150, h/2 - 98),Point(w/2-150,h/2-98),Point(0,0),Point(w,0))#,Point(w/2-150-34,h/2-98-20),Point(w/2+150+34,h/2-98-20))
open_wall.setFillColor(( 69/2,139/2,116/2))
open_wall.setDepth(105)
open_wall.setBorderColor("grey")
open_ground = Polygon(Point(w/2+150,h/2-98),Point(w/2-150,h/2-98),Point(0,h),Point(w,h)) #-0.588679245,-1
open_ground.setDepth(100)
open_ground.setFillColor((222/1.25,184/1.25,135/1.25))
open_ground.setBorderColor("grey")#( 69/2,139/2,116/2)
open_ground.setBorderWidth(0.5)
walls4 = Polygon(Point(0,0),Point(w,0),Point(w/2 + 150, h/2 - 98),Point(w/2-150,h/2-98))
walls4.adjustReference(w/2,h/2)
walls4.setFillColor((222/1.25,184/1.25,135/1.25))
walls4.setBorderWidth(0)
walls4.flip(90)
walls5 = Polygon(Point(w/2-150,h/2-100),Point(w/2+150,h/2-100),Point(w/2+150,h/2+50),Point(w/2-150,h/2+50))
walls5.setFillColor(( 69/1.5,139/1.5,116/1.5))
walls5.setBorderColor(( 69/2,139/2,116/2))
walls5.setBorderWidth(1)
walls5.setDepth(60)
walls7= Polygon(Point(w/2-150,h/2-100),Point(w/2+150,h/2-100),Point(w/2+150,h/2+100),Point(w/2-150,h/2+100))
walls7.setFillColor((222/1.25,184/1.25,135/1.25))
walls7.setBorderColor((222/2,184/2,135/2))
walls7.setDepth(75)
walls = Layer()
walls.add(walls1)
walls.add(walls2)
walls.add(walls3)
walls.add(walls4)
walls.add(walls5)
walls.add(walls7)
walls.add(open_wall)
walls.add(open_ground)
Stairs1 = Layer()
diff = 0
stair1 = Polygon(Point(w/2-100,h/2+100),Point(w/2+100,h/2+100),Point(w/2+100,h/2+80),Point(w/2-100,h/2+80)) #If you want to fill the space change 100 to 150 and soforth
stair1_up = Polygon(Point(w/2+100,h/2+80),Point(w/2+97,h/2+70-diff),Point(w/2-97,h/2+70-diff),Point(w/2-100,h/2+80))
stair1.setFillColor("white")
stair1_up.setFillColor("grey")
stair1_hold = Polygon(Point(w/2+100,h/2+80),Point(w/2+97+diff,h/2+70+diff),Point(w/2+97+diff,h/2),Point(w/2+100,h/2+diff))
stair1_hold.setFillColor((125/1.5, 37/1.5, 2/1.5))
stair1_hold.move(0,5)
stair2_hold = stair1_hold.clone()
stair2_hold.adjustReference(-100,-80)
stair2_hold.flip()
stair_middle = Path(Point(w/2-100,h/2+80),Point(w/2+100,h/2+80))
Stairs1.add(stair1)
Stairs1.add(stair1_up)
Stairs1.add(stair_middle)
Stairs1.add(stair1_hold)
Stairs1.add(stair2_hold)
Stairs1.adjustReference(w/2,h/2+84)
diff = 0
Stairs2 = Stairs1.clone()
Stairs2.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs2.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs2.getContents()[3].scale(0.97)
Stairs2.scale(0.97)
Stairs2.move(0,-30)
diff = -2
Stairs3 = Stairs2.clone()
Stairs3.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs3.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs3.getContents()[3].scale(0.97)
Stairs3.scale(0.96)
Stairs3.move(0,-28)
diff = -4
Stairs4 = Stairs3.clone()
Stairs4.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs4.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs4.getContents()[3].scale(0.97)
Stairs4.scale(0.95)
Stairs4.move(0,-25)
diff = -6
Stairs5 = Stairs4.clone()
Stairs5.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs5.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs5.getContents()[3].scale(0.97)
Stairs5.scale(0.94)
Stairs5.move(0,-22)
diff = -8
Stairs6 = Stairs5.clone()
Stairs6.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs6.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs6.getContents()[3].scale(0.97)
Stairs6.scale(0.94)
Stairs6.move(0,-20)
diff = -10
Stairs7 = Stairs6.clone()
Stairs7.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs7.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs7.getContents()[3].scale(0.97)
Stairs7.scale(0.93)
Stairs7.move(0,-17)
diff = -10
Stairs8 = Stairs7.clone()
Stairs8.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs8.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs8.getContents()[3].scale(0.97)
Stairs8.scale(0.92)
Stairs8.move(0,-14)
diff = -10
Stairs9 = Stairs8.clone()
Stairs9.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs9.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs9.getContents()[3].scale(0.97)
Stairs9.scale(0.92)
Stairs9.move(0,-13)
diff = -10
Stairs10 = Stairs9.clone()
Stairs10.getContents()[1].setPoint(Point(w/2+97,h/2+70-diff),1)
Stairs10.getContents()[1].setPoint(Point(w/2-97,h/2+70-diff),2)
Stairs10.scale(0.92)
Stairs10.getContents()[3].scale(0.97)
Stairs10.move(0,-11)

s1=Point(w/2+97+diff,h/2)
s0 = s1 + Point(7,40)
s2=s1-Point(6,30)
s3=s2 - Point(8,28)
s4=s3-Point(9,25)
s5=s4-Point(11,22)
s6=s5-Point(10,20)
s7=s6-Point(5.5,8.5)
s8=s7-Point(3,3.5)
s9=s8-Point(10.7,13)
s10=s9-Point(10,11)
holder = Spline(s0,s1,s2,s3,s4,s5,s6,s7)
holder.setBorderWidth(14)
holder.setBorderColor((125/2, 37/2, 2/2))
holder.move(14,-2)
holder.adjustReference(-104,-48)
holder2 = holder.clone()
holder2.flip()
holder2.move(-8,-2)
Stairs=Layer()
Stairs.add(Stairs1)
Stairs.add(Stairs2)
Stairs.add(Stairs3)
Stairs.add(Stairs4)
Stairs.add(Stairs5)
Stairs.add(Stairs6)
Stairs.add(Stairs7)
Stairs.add(Stairs8)
Stairs.add(Stairs9)
Stairs.add(Stairs10)
everything2 = Layer()
everything2.add(Stairs)
everything2.add(holder)
everything2.add(holder2)
everything2.adjustReference(w/2,h/2)
everything2.scale(0.12)
everything2.setDepth(55)
open_wall.adjustReference(-150,98)
open_ground.adjustReference(-150,98)
walls5.adjustReference(150,100)
walls7.adjustReference(150,100)
walls1.adjustReference(w/2,h/2)
walls3.adjustReference(w/2,h/2)
everything.add(everything2)
for i in walls.getContents():
    i.scale(0.12)
    everything.add(i)

everything2.adjustReference(0,-180)
walls5.adjustReference(0,-180)
walls7.adjustReference(0,-180)
walls1.adjustReference(0,-180)
walls3.adjustReference(0,-180)
walls2.adjustReference(0,-180)
walls4.adjustReference(0,-180)
open_wall.adjustReference(0,-180)

bad_targetpole.setDepth(60)
good_targetpole.setDepth(60)
bad_targetpole.move(800,320)
good_targetpole.move(100,320)
everything.add(good_targetpole)
everything.add(bad_targetpole)
good_targetpole1 = good_targetpole.clone()
good_targetpole1.scale(0.5)
good_targetpole1.move(300,0)
good_targetpole2 = good_targetpole1.clone()
good_targetpole2.scale(0.8)
good_targetpole2.move(200,0)
good_targetpole3 = good_targetpole2.clone()
good_targetpole3.move(-100,-220)
good_targetpole3.setDepth(46)
good_targetpole3.scale(0.7)
good_targetpole4= good_targetpole3.clone()
good_targetpole4.move(140,0)
good_targetpole5 = good_targetpole4.clone()
good_targetpole5.move(90,0)
good_targetpole6 = good_targetpole5.clone()
good_targetpole6.move(-15,85)
good_targetpole6.scale(1.1)
good_targetpole6.setDepth(48)
good_targetpole6.getContents()[0].deletePoint(5)
good_targetpole6.getContents()[0].deletePoint(5)
good_targetpole6.getContents()[-2].setFillColor("red")
good_targetpole7 = good_targetpole6.clone()
good_targetpole7.move(-200,0)
everything.add(good_targetpole3)
everything.add(good_targetpole4)
everything.add(good_targetpole5)
everything.add(good_targetpole6)
everything.add(good_targetpole7)
everything.add(wall)
e=150
d=0
wall.move(d,e)
balcony.move(d,e)
good_targetpole1.move(0,50)
good_targetpole1.scale(0.7)
good_targetpole2.setDepth(-10)
good_targetpole2.move(80,50)
good_targetpole2.scale(0.7)
good_targetpole3.move(d,e)
good_targetpole4.move(d,e)
good_targetpole5.move(d,e)
good_targetpole6.move(d,e)
good_targetpole7.move(d,e)
everything.adjustReference(c.getWidth()/2,c.getHeight()/2)

for i in range(59):
    everything.move(8,-0.6779661016949)
everything.move(2,0)
fire()
bullethit2 = bullethit.clone()
bullethit2.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit2.move(50,75)
good_targetpole.add(bullethit2)
bullethit2.setDepth(-50)
hit()
for i in range(60):
    everything.move(-8,0.666666666)
for i in range(100):
    everything.scale(1.01)
for i in range(68):
    everything.move(4.0294117647,0.0882353)

for i in range(66):
    everything.move(0.6666666666,3.9848485)
fire()
bullethit3 = bullethit.clone()
bullethit3.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit3.move(50,75)
good_targetpole3.add(bullethit3)
bullethit3.setDepth(-50)
hit(good_targetpole3)
for i in range(95):
    everything.move(-4.01052631579, 0)
fire()
bullethit4 = bullethit.clone()
bullethit4.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit4.move(50,75)
good_targetpole4.add(bullethit4)
bullethit4.setDepth(-50)
hit(good_targetpole4)
for i in range(60):
    everything.move(-4.0166666666,0.1666666666)
fire()
bullethit5 = bullethit.clone()
bullethit5.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit5.move(50,75)
good_targetpole5.add(bullethit5)
bullethit5.setDepth(-50)
hit(good_targetpole5)
for i in range(67):
    everything.move(0.5373134328358,-4.0298507462686)
for i in range(67):
    everything.move(4,-0.1044776119402)
for i in range(140):
    everything.scale(1.01)
# everything.scale(10.89)
for i in range(55):
    everything.scale(1.0037)
    main_wall_bottom.setPoint(main_wall_bottom.getPoint(2)+Point(-2,1),2)
    main_wall_bottom.setPoint(main_wall_bottom.getPoint(3)-Point(2,1),3)
    main_wall_bottom.setPoint(main_wall_bottom.getPoint(4)+Point(2,-1),4)
    main_wall_bottom.setPoint(main_wall_bottom.getPoint(5)+Point(2,1),5)
everything2.adjustReference(0,180)
walls5.adjustReference(0,180)
walls7.adjustReference(0,180)
walls1.adjustReference(0,180)
walls3.adjustReference(0,180)
walls2.adjustReference(0,180)
walls4.adjustReference(0,180)
open_wall.adjustReference(0,180)
for i in range(300):
    everything2.scale(1.004)
    for i in walls.getContents():
        i.scale(1.004)
everything2.adjustReference(0,-21.6)
walls5.adjustReference(0,-21.6)
walls7.adjustReference(0,-21.6)
walls1.adjustReference(0,-21.6)
walls3.adjustReference(0,-21.6)
walls2.adjustReference(0,-21.6)
walls4.adjustReference(0,-21.6)
open_wall.adjustReference(0,-21.6)
everything.remove(walls3)
open_wall.setFillColor(( 69/1.5,139/1.5,116/1.5))
open_wall.setBorderColor(( 69/2,139/2,116/2))
open_ground.setBorderColor(( 69/2,139/2,116/2))
open_ground.setFillColor((222/1.25,184/1.25,135/1.25))
for i in range(70):
    everything2.scale(1.006)
    everything2.move(0,1.2)
    # everything3.move(0,3.1714285714285)
    for i in walls.getContents():
        i.scale(1.006)
        i.move(0,1.2)
everything2.remove(holder)
everything2.remove(holder2)
everything2.remove(Stairs)
for i in range(2):
    open_wall.move(0,-1.03)
    open_ground.move(0,-1.03)
    sleep(0.001)
#last
walls_5 = Polygon(Point(w/2-150,h/2-100),Point(w/2+150,h/2-100),Point(w/2+150,h/2+100),Point(w/2-150,h/2+100))
walls_5.setFillColor(( 69/1.5,139/1.5,116/1.5))
walls_5.setBorderColor(( 69/2,139/2,116/2))
walls_5.adjustReference(150,100)
walls_5.setBorderWidth(1)
walls_5.setDepth(90)
walls6=walls_5.clone()
walls6.setFillColor(( 69/1.5,139/1.5,116/1.5))
walls6.adjustReference(300,0)
walls6.move(-300,0)
walls_5.scale(5)
walls_5.move(0,-200)
walls6.scale(4)
walls7 = Polygon(Point(0,0),Point(w,0),Point(w,h),Point(0,h))
walls7.setFillColor((222/1.25,184/1.25,135/1.25))
walls7.setDepth(100)
c.add(walls_5)
c.add(walls7)
walls_5.adjustReference(0,h/2)
walls6.adjustReference(0,h/2)

walls11 = Polygon(Point(0,0),Point(0,h),Point(w/2 - 150, h/2 + 100),Point(w/2-150,h/2-100))
walls11.setFillColor(( 69/1.5,139/1.5,116/1.5))
walls11.setBorderColor(( 69/2,139/2,116/2))
walls11.setDepth(47)
walls12 = walls11.clone()
walls12.adjustReference(w/2,h/2)
walls12.flip()
walls13= Polygon(Point(0,0),Point(w,0),Point(w/2+150,h/2-98),Point(w/2-150,h/2-98))#Point(w/2 + 150, h/2 - 98),Point(w/2-150,h/2-98))
walls13.setFillColor("grey")
walls13.setDepth(0)
walls14 = Polygon(Point(0,0),Point(w,0),Point(w/2 + 150, h/2 - 98),Point(w/2-150,h/2-98))
walls14.adjustReference(w/2,h/2)
walls14.setFillColor((222/1.25,184/1.25,135/1.25))
walls14.setBorderWidth(0)
walls14.flip(90)
walls15 = Polygon(Point(w/2-150,h/2-100),Point(w/2+150,h/2-100),Point(w/2+150,h/2+100),Point(w/2-150,h/2+100))
walls15.setFillColor(( 69/1.5,139/1.5,116/1.5))
walls15.setBorderColor(( 69/2,139/2,116/2))
walls15.setBorderWidth(1)
walls15.setDepth(60)
targetpole1 = Polygon(Point(30,0),Point(0,30),Point(0,100),Point(30,130),Point(40,130),Point(40,200),Point(60,200),Point(60,130),Point(70,130), Point(100,100),Point(100,30),Point(70,0))
targetpole1.setFillColor('grey')
targetpole1.setBorderWidth(2)
target = Polygon(Point(65,10),Point(50,5),Point(35,10),Point(35,30),Point(10,45),Point(10,100),Point(30,120),Point(70,120),Point(90,100),Point(90,45),Point(65,30))
target.setFillColor((60,60,60))
circle1 = Circle(30,centerPt=Point(50,77.5))
circle1.setFillColor("green")
circle1.setDepth(10)
circle2 = Circle(20,centerPt=Point(50,77.5))
circle2.setFillColor((60,60,60))
circle2.setDepth(0)
good_targetpole_last1 = Layer()
good_targetpole_last1.add(targetpole1)
good_targetpole_last1.add(target)
good_targetpole_last1.add(circle1)
good_targetpole_last1.add(circle2)
good_targetpole_last1.scale(1.5)
good_targetpole_last1.move(w/2,h-300)
good_targetpole_last1.setDepth(-10)
good_targetpole_last1.adjustReference(0,-110)
good_targetpole_last2 = good_targetpole_last1.clone()
good_targetpole_last2.scale(0.7)
good_targetpole_last3 = good_targetpole_last1.clone()
good_targetpole_last3.setDepth(45)
good_targetpole_last3.scale(0.4)
good_targetpole_last4 = good_targetpole_last1.clone()
good_targetpole_last4.scale(0.3)
good_targetpole_last4.setDepth(46)
bad_targetpole_last1= good_targetpole_last1.clone()
bad_targetpole_last1.getContents()[-2].setFillColor("red")
bad_targetpole_last1.scale(0.55)
bad_targetpole_last1.setDepth(44)
bad_targetpole_last1.move(50,0)
move_pad1 = Polygon(Point(0,h),Point(w,h),Point(w-17.09677419*2,h-10*2),Point(0+17.09677419*2,h-10*2))
move_pad1.setFillColor("black")
move_pad1.adjustReference(w/2,-h/2)
move_pad1.setDepth(48)
move_pad2 = move_pad1.clone()
move_pad2.scale(0.7)
move_pad3 = move_pad1.clone()
move_pad3.scale(0.4)
move_pad4 = move_pad1.clone()
move_pad4.scale(0.3)
everything3 = Layer()
everything3.move(-w,-h/2)
everything3.add(move_pad2)
everything3.add(move_pad3)
everything3.add(move_pad4)
everything3.add(walls11)
everything3.add(walls12)
everything3.add(walls13)
everything3.add(walls14)
everything3.add(walls15)
everything3.add(good_targetpole_last2)
everything3.add(good_targetpole_last3)
everything3.add(good_targetpole_last4)
everything3.add(bad_targetpole_last1)
everything3.setDepth(40)

sleep(1)
everything.remove(open_wall)
everything.remove(open_ground)
c.add(everything3)
# everything.scale(2.5)
# everything.scale(27.231384134682)
# for i in range(190):
    # everything.scale(1.008)
# everything.scale(3.2)
for i in range(150):
    walls_5.setPoint(walls_5.getPoint(0)-Point(0,0.94),0)
    walls_5.setPoint(walls_5.getPoint(-1)-Point(0,0.94),-1)
    # print(walls_5.getReferencePoint())
    walls_5.move(0,2.48)
    sleep(0.01)
for i in range(200):
    walls_5.move(6.8,1.5)
    everything3.move(6.8,1.5)
    good_targetpole_last3.move(1,0)
    good_targetpole_last4.move(0.5,0)
    good_targetpole_last2.move(-1,0)

walls11.setPoint(Point(-530,-310),0)
walls11.setPoint(Point(-530,h+310),1)
walls12.setPoint(Point(-530,-310),0)
walls12.setPoint(Point(-530,h+310),1)
walls14.setPoint(Point(-530,-310),0)
walls14.setPoint(Point(530,-310),1)
c.remove(walls_5)
for i in range(100):
    good_targetpole_last2.move(-2,0)
    good_targetpole_last3.move(-2,0)
    good_targetpole_last4.move(-1,0)
    everything3.move(3.47,-0.48)
fire()
bullethit6 = bullethit.clone()
bullethit6.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit6.move(50,75)
good_targetpole_last2.add(bullethit6)
bullethit6.setDepth(-50)
hit(good_targetpole_last2)
for i in range(50):
    good_targetpole_last3.move(-4,0)
    good_targetpole_last4.move(-2,0)
    everything3.move(-3.853333333332,0.446666666664)
for i in range(100):
    good_targetpole_last4.move(2,0)
    good_targetpole_last3.move(4,0)
    everything3.move(-3.853333333332,0.446666666664)

fire()
bullethit7 = bullethit.clone()
bullethit7.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit7.move(50,75)
good_targetpole_last3.add(bullethit7)
bullethit7.setDepth(-50)
hit(good_targetpole_last3)
for i in range(50):
    good_targetpole_last4.move(-2,0)
    everything3.move(4.14,0.44)
fire()
bullethit8 = bullethit.clone()
bullethit8.move(-c.getWidth()/2,-c.getHeight()/2)
bullethit8.move(50,75)
good_targetpole_last4.add(bullethit8)
bullethit8.setDepth(-50)
hit(good_targetpole_last4)

#exit
banner = Polygon(Point(w/2,h/2 - 100),Point(w/2,h/2 - 100),Point(w/2,h/2 + 100),Point(w/2,h/2 + 100))
banner.setFillColor((25, 135, 84))
banner.setDepth(0)
banner1 = Polygon(Point(w/2,h/2 - 100),Point(w/2,h/2 - 100),Point(w/2,h/2 - 50),Point(w/2,h/2 -50))
banner1.setFillColor((0, 128, 128))
banner1.setDepth(-5)
banner2 = Polygon(Point(w/2,h/2 + 100),Point(w/2,h/2 + 100),Point(w/2,h/2 + 50),Point(w/2,h/2 + 50))
banner2.setFillColor((0, 128, 128))
banner2.setDepth(-5)
congra = Text("Mission Accomplished",36,centerPt=Point(w/2,h/2))
congra.setFontColor("white")
congra.setDepth(-20)
star1 = Polygon(Point(5,0),Point(10,-10),Point(15,0),Point(30,0),Point(20,10),Point(23,22),Point(10,15),Point(-3,22),Point(0,10),Point(-10,0),Point(0,0))
star1.setFillColor("yellow")
star1.move(50,50)
star1.setBorderWidth(0)
star1.move(w/2,h/2)
star1.setDepth(-10)
star2 = star1.clone()
star2.move(30,5)
star3 = star2.clone()
star3.move(30,-5)
c.add(banner)
c.add(banner1)
c.add(banner2)
c.remove(crosshairs)
for i in range(70):
    banner.setPoint(banner.getPoint(0)-Point(4,0),0)
    banner.setPoint(banner.getPoint(1)+Point(4,0),1)
    banner.setPoint(banner.getPoint(2)+Point(4,0),2)
    banner.setPoint(banner.getPoint(3)-Point(4,0),3)
    banner1.setPoint(banner.getPoint(0)-Point(4,0),0)
    banner1.setPoint(banner.getPoint(1)+Point(4,0),1)
    banner1.setPoint(banner.getPoint(2)+Point(4,0),2)
    banner1.setPoint(banner.getPoint(3)-Point(4,0),3)
    banner2.setPoint(banner.getPoint(0)-Point(4,0),0)
    banner2.setPoint(banner.getPoint(1)+Point(4,0),1)
    banner2.setPoint(banner.getPoint(2)+Point(4,0),2)
    banner2.setPoint(banner.getPoint(3)-Point(4,0),3)
    sleep(0.002)
c.add(congra)
for i in range(100):
    banner.setPoint(banner.getPoint(0)-Point(4,0),0)
    banner.setPoint(banner.getPoint(1)+Point(4,0),1)
    banner.setPoint(banner.getPoint(2)+Point(4,0),2)
    banner.setPoint(banner.getPoint(3)-Point(4,0),3)
    banner1.setPoint(banner.getPoint(0)-Point(4,0),0)
    banner1.setPoint(banner.getPoint(1)+Point(4,0),1)
    banner1.setPoint(banner.getPoint(2)+Point(4,0),2)
    banner1.setPoint(banner.getPoint(3)-Point(4,0),3)
    banner2.setPoint(banner.getPoint(0)-Point(4,0),0)
    banner2.setPoint(banner.getPoint(1)+Point(4,0),1)
    banner2.setPoint(banner.getPoint(2)+Point(4,0),2)
    banner2.setPoint(banner.getPoint(3)-Point(4,0),3)
    sleep(0.001)

c.add(star1)
sleep(0.1)
c.add(star2)
sleep(0.1)
c.add(star3)
sleep(1)
c.remove(banner)
c.remove(banner1)
c.remove(banner2)
c.remove(star1)
c.remove(star2)
c.remove(star3)
c.remove(congra)
end_desktop = Polygon(Point(0,0),Point(0,h),Point(w,h),Point(w,0))
end_desktop.setFillColor("black")
end_desktop.setDepth(-50)
c.add(end_desktop)
title = Text("Credits",48,centerPt=Point(w/2,h/5))
title.setFontColor("white")
title.setDepth(-51)
credits = Text("1. Nebil Rahmeto\n2. Bekalu Ademe \n3. Mahlet Anteneh \n4. Toran Zerihun\n5. Abdirisak Mohamed",28,Point(w/2-200,h/2-100))
credits.setJustification("left")
credits.setFontColor("white")
credits.setDepth(-60)
credits1 = Text("UGR/25275/14 \nUGR/25898/14 \nUGR/26178/14\nUGR/26631/14\nUGR/26703/14",28,Point(w/2+200,h/2-100))
credits1.setJustification("left")
credits1.setFontColor("white")
credits1.setDepth(-52)
c.add(title)
sleep(0.1)
c.add(credits)
c.add(credits1)
title.setFontColor((5, 29, 137))
for i in range(100):
    title.setFontColor((5+2.5*i, 29+1.5*i, 137+i))
    sleep(0.1)
for i in range(100):
    title.setFontColor((5+i, 29+2*i, 137-i))
    sleep(0.1)